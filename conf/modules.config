/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: "DOWNLOAD_ENCODE"{
        storeDir = { "${params.outdir}/data/encode/${meta.Organism.replaceAll(' ', '_')}/${meta.assay_title.replaceAll(' ', '_')}/${meta.Biosample_term_name.replaceAll(' ', '_')}/${meta.id}/raw" }
    }

    // ---------------------------
    //   Bedgraph manipulation 
    // ---------------------------
    withName: "BIG_TO_BEDGRAPH"{
        storeDir = { "${params.outdir}/data/encode/${meta.Organism.replaceAll(' ', '_')}/${meta.assay_title.replaceAll(' ', '_')}/${meta.Biosample_term_name.replaceAll(' ', '_')}/${meta.id}/bedgraph" }
    }

    withName: "CLIP_BEDGRAPH"{
        storeDir = { "${params.outdir}/data/encode/${meta.Organism.replaceAll(' ', '_')}/${meta.assay_title.replaceAll(' ', '_')}/${meta.Biosample_term_name.replaceAll(' ', '_')}/${meta.id}/bedgraph_clipped" }
    }

    // --------------------------------------------
    //   Creation of training/validation/test sets 
    // --------------------------------------------

    withName: "SPLIT_RANDOM"{
        storeDir = { "${params.outdir}/data/genome/${meta.id}/split_random" }
    }

    // --------------------------------------------
    //   Subsample 
    // --------------------------------------------

    withName: "SUBSAMPLE_BED_TRAINING|SUBSAMPLE_BED_VALIDATION|SUBSAMPLE_BED_TEST"{
        storeDir = { "${params.outdir}/data/genome/${meta.id}/split_random/subsampled/${task.process.tokenize(':')[-1].tokenize('_')[1].toLowerCase()}/" }
    }

    // --------------------------------------------
    //   File chunk_size  
    // --------------------------------------------
    withName: "CHUNK_TRAIN_BED|CHUNK_VALIDATION_BED|CHUNK_TEST_BED"{
        storeDir = { "${params.outdir}/data/dataset/input_files/${meta.Organism.replaceAll(' ', '_')}/${meta.assay_title.replaceAll(' ', '_')}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[1].toLowerCase()}/chunks" }
    }

    // blacklist
    withName: "REMOVE_BLACKLIST_TRAIN|REMOVE_BLACKLIST_VALIDATION|REMOVE_BLACKLIST_TEST"{
        storeDir = { "${params.outdir}/data/genome/${meta.id}/split_random/no_blacklist/${task.process.tokenize(':')[-1].tokenize('_')[2].toLowerCase()}/" }
    }


    withName: "PREP_INPUT_FILE_TRAIN|PREP_INPUT_FILE_VALIDATION|PREP_INPUT_FILE_TEST"{
        storeDir = { "${params.outdir}/data/dataset/input_files/${meta.Organism.replaceAll(' ', '_')}/${meta.assay_title.replaceAll(' ', '_')}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[3].toLowerCase()}" }
    }


    withName: "CREATE_DATASET_OBJECT_TRAIN|CREATE_DATASET_OBJECT_VALIDATION|CREATE_DATASET_OBJECT_TEST"{
        storeDir = { "${params.outdir}/data/dataset/objects/${meta.Organism.replaceAll(' ', '_')}/${meta.assay_title.replaceAll(' ', '_')}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[3].toLowerCase()}" }
    }




    // --------------------------------------------
    //  cobalt   
    // --------------------------------------------
    withName: "CHUNK_GENOME"{
        storeDir = { "${params.outdir}/data/genome/split_cobalt/genome_chunks" }
    }
    withName: "GET_FASTA_COBALT"{
        storeDir = { "${params.outdir}/data/genome/split_cobalt/genome_chunks/fasta" }
    }
    withName: "FAMSA_ALIGN_COBALT"{
        storeDir = { "${params.outdir}/data/genome/split_cobalt/genome_chunks/msa" }
    }

    // --------------------------------------------
    //    Train and Tune
    // --------------------------------------------


    withName: "TRAIN_MODEL"{
        publishDir = [
            path: { "${params.outdir}/models/${params.model_name}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: "TUNE_MODEL"{
        storeDir = { "${params.outdir}/models/${params.model_name}/tuning" }
    }

    withName: "EVALUATE_MODEL"{
       publishDir = [
            path: { "${params.outdir}/models" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]    
    }
}